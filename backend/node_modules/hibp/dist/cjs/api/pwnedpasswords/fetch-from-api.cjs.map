{"version":3,"file":"fetch-from-api.cjs","sources":["../../../../src/api/pwnedpasswords/fetch-from-api.ts"],"sourcesContent":["import { installUndiciOnNode18 } from '../fetch-polyfill.js';\nimport { BAD_REQUEST } from './responses.js';\n\ninstallUndiciOnNode18();\n\n/**\n * Fetches data from the supplied API endpoint.\n *\n * HTTP status code 200 returns plain text (data found).\n * HTTP status code 400 throws an Error (bad request).\n *\n * @internal\n * @private\n * @param {string} endpoint the API endpoint to query\n * @param {object} [options] a configuration object\n * @param {string} [options.baseUrl] a custom base URL for the\n * pwnedpasswords.com API endpoints (default: `https://api.pwnedpasswords.com`)\n * @param {number} [options.timeoutMs] timeout for the request in milliseconds\n * (default: none)\n * @param {string} [options.userAgent] a custom string to send as the User-Agent\n * field in the request headers (default: `hibp <version>`)\n * @param {boolean} [options.addPadding] ask the remote API to add padding to\n * the response to obscure the password prefix (default: `false`)\n * @param {'sha1' | 'ntlm'} [options.mode] return SHA-1 or NTLM hashes\n * (default: `sha1`)\n * @returns {Promise<string>} a Promise which resolves to the data resulting\n * from the query, or rejects with an Error\n */\nexport async function fetchFromApi(\n  endpoint: string,\n  options: {\n    baseUrl?: string;\n    timeoutMs?: number;\n    userAgent?: string;\n    addPadding?: boolean;\n    mode?: 'sha1' | 'ntlm';\n  } = {},\n): Promise<string> {\n  const {\n    baseUrl = 'https://api.pwnedpasswords.com',\n    timeoutMs,\n    userAgent,\n    addPadding = false,\n    mode = 'sha1',\n  } = options;\n\n  const config: RequestInit = {\n    headers: {\n      ...(userAgent ? { 'User-Agent': userAgent } : {}),\n      ...(addPadding ? { 'Add-Padding': 'true' } : {}),\n    },\n    ...(timeoutMs ? { signal: AbortSignal.timeout(timeoutMs) } : {}),\n  };\n  const url = `${baseUrl.replace(/\\/$/g, '')}${endpoint}?mode=${mode}`;\n  const response = await fetch(url, config);\n\n  if (response.ok) return response.text();\n\n  if (response.status === BAD_REQUEST.status) {\n    const text = await response.text();\n    throw new Error(text);\n  }\n\n  throw new Error(response.statusText);\n}\n"],"names":["installUndiciOnNode18","fetchFromApi","endpoint","options","baseUrl","timeoutMs","userAgent","addPadding","mode","config","headers","signal","AbortSignal","timeout","url","replace","response","fetch","ok","text","status","BAD_REQUEST","Error","statusText"],"mappings":";;;;AAGAA,aAAAA,CAAAA,qBAAqB,CAAE,CAAA;AAEvB;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACI,eAAeC,YAAYA,CAChCC,QAAgB,EAChBC,UAMI,EAAE,EAAA;EAEN,MAAM;IACJC,OAAO,GAAG,gCAAgC;IAC1CC,SAAS;IACTC,SAAS;IACTC,UAAU,GAAG,KAAK;IAClBC,IAAI,GAAG;EAAM,CACd,GAAGL,OAAO;EAEX,MAAMM,MAAM,GAAgB;IAC1BC,OAAO,EAAE;MACP,IAAIJ,SAAS,GAAG;QAAE,YAAY,EAAEA;MAAS,CAAE,GAAG,CAAA,CAAE,CAAC;MACjD,IAAIC,UAAU,GAAG;QAAE,aAAa,EAAE;MAAM,CAAE,GAAG,CAAA,CAAE;IAChD,CAAA;IACD,IAAIF,SAAS,GAAG;MAAEM,MAAM,EAAEC,WAAW,CAACC,OAAO,CAACR,SAAS;IAAG,CAAA,GAAG,EAAE;EAChE,CAAA;EACD,MAAMS,GAAG,GAAG,GAAGV,OAAO,CAACW,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,GAAGb,QAAQ,SAASM,IAAI,EAAE;EACpE,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEL,MAAM,CAAC;EAEzC,IAAIO,QAAQ,CAACE,EAAE,EAAE,OAAOF,QAAQ,CAACG,IAAI,CAAE,CAAA;EAEvC,IAAIH,QAAQ,CAACI,MAAM,KAAKC,SAAW,CAAAA,WAAA,CAACD,MAAM,EAAE;IAC1C,MAAMD,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAE,CAAA;IAClC,MAAM,IAAIG,KAAK,CAACH,IAAI,CAAC;;EAGvB,MAAM,IAAIG,KAAK,CAACN,QAAQ,CAACO,UAAU,CAAC;AACtC;"}