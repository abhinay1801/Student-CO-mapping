{"version":3,"file":"search.cjs","sources":["../../src/search.ts"],"sourcesContent":["import type { Breach, Paste } from './api/haveibeenpwned/types.js';\nimport { breachedAccount } from './breached-account.js';\nimport { pasteAccount } from './paste-account.js';\n\nexport interface SearchResults {\n  breaches: Breach[] | null;\n  pastes: Paste[] | null;\n}\n\n/**\n * An object representing search results.\n *\n * @typedef {object} SearchResults\n * @property {(Breach[] | null)} breaches\n * @property {(Paste[] | null)} pastes\n */\n\n/**\n * Fetches all breaches and all pastes associated with the provided account\n * (email address or username). Note that the remote API does not support\n * querying pastes by username (only email addresses), so in the event the\n * provided account is not a valid email address, only breach data is queried\n * and the \"pastes\" field of the resulting object will always be null. This is\n * exactly how searching via the current web interface behaves, which this\n * convenience method is designed to mimic.\n *\n * ðŸ”‘ `haveibeenpwned.com` requires an API key from\n * https://haveibeenpwned.com/API/Key for the `breachedaccount` and\n * `pasteaccount` endpoints. The `apiKey` option here is not explicitly\n * required, but direct requests made without it will fail (unless you specify a\n * `baseUrl` to a proxy that inserts a valid API key on your behalf).\n *\n * @param {string} account an email address or username\n * @param {object} [options] a configuration object\n * @param {string} [options.apiKey] an API key from\n * https://haveibeenpwned.com/API/Key (default: undefined)\n * @param {string} [options.domain] a domain by which to filter the breach\n * results (default: all domains)\n * @param {boolean} [options.truncate] truncate the breach results to only\n * include the name of each breach (default: true)\n * @param {string} [options.baseUrl] a custom base URL for the\n * haveibeenpwned.com API endpoints (default:\n * `https://haveibeenpwned.com/api/v3`)\n * @param {number} [options.timeoutMs] timeout for the request in milliseconds\n * (default: none)\n * @param {string} [options.userAgent] a custom string to send as the\n * User-Agent field in the request headers (default: `hibp <version>`)\n * @returns {Promise<SearchResults>} a Promise which resolves to an object\n * containing a \"breaches\" key (which can be null or an array of breach objects)\n * and a \"pastes\" key (which can be null or an array of paste objects), or\n * rejects with an Error\n * @example\n * try {\n *   const data = await search(\"foo\", { apiKey: \"my-api-key\" });\n *   if (data.breaches || data.pastes) {\n *     // ...\n *   } else {\n *     // ...\n *   }\n * } catch (err) {\n *   // ...\n * }\n * @example\n * try {\n *   const data = await search(\"nobody@nowhere.com\", {\n *     baseUrl: \"https://my-hibp-proxy:8080\",\n *     truncate: false,\n *   });\n *   if (data.breaches || data.pastes) {\n *     // ...\n *   } else {\n *     // ...\n *   }\n * } catch (err) {\n *   // ...\n * }\n * @see https://haveibeenpwned.com/\n */\nexport async function search(\n  account: string,\n  options: {\n    /**\n     * an API key from https://haveibeenpwned.com/API/Key (default: undefined)\n     */\n    apiKey?: string;\n    /**\n     * a domain by which to filter the results (default: all domains)\n     */\n    domain?: string;\n    /**\n     * truncate the results to only include the name of each breach (default:\n     * true)\n     */\n    truncate?: boolean;\n    /**\n     * a custom base URL for the haveibeenpwned.com API endpoints (default:\n     * `https://haveibeenpwned.com/api/v3`)\n     */\n    baseUrl?: string;\n    /**\n     * timeout for the request in milliseconds (default: none)\n     */\n    timeoutMs?: number;\n    /**\n     * a custom string to send as the User-Agent field in the request headers\n     * (default: `hibp <version>`)\n     */\n    userAgent?: string;\n  } = {},\n): Promise<SearchResults> {\n  const { apiKey, domain, truncate = true, baseUrl, timeoutMs, userAgent } = options;\n\n  const [breaches, pastes] = await Promise.all([\n    breachedAccount(account, {\n      apiKey,\n      domain,\n      truncate,\n      baseUrl,\n      timeoutMs,\n      userAgent,\n    }),\n    // This email regex is garbage but it seems to be what the API uses:\n    /^.+@.+$/.test(account)\n      ? pasteAccount(account, { apiKey, baseUrl, timeoutMs, userAgent })\n      : null,\n  ]);\n\n  return { breaches, pastes };\n}\n"],"names":["search","account","options","apiKey","domain","truncate","baseUrl","timeoutMs","userAgent","breaches","pastes","Promise","all","breachedAccount","test","pasteAccount"],"mappings":";;;;;AASA;;;;;;AAMG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DG;AACI,eAAeA,MAAMA,CAC1BC,OAAe,EACfC,UA4BI,EAAE,EAAA;EAEN,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC,QAAQ,GAAG,IAAI;IAAEC,OAAO;IAAEC,SAAS;IAAEC;EAAS,CAAE,GAAGN,OAAO;EAElF,MAAM,CAACO,QAAQ,EAAEC,MAAM,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3CC,eAAAA,CAAAA,eAAe,CAACZ,OAAO,EAAE;IACvBE,MAAM;IACNC,MAAM;IACNC,QAAQ;IACRC,OAAO;IACPC,SAAS;IACTC;GACD,CAAC;;EAEF,SAAS,CAACM,IAAI,CAACb,OAAO,CAAA,GAClBc,YAAY,CAAAA,YAAA,CAACd,OAAO,EAAE;IAAEE,MAAM;IAAEG,OAAO;IAAEC,SAAS;IAAEC;EAAW,CAAA,CAAA,GAC/D,IAAI,CACT,CAAC;EAEF,OAAO;IAAEC,QAAQ;IAAEC;EAAQ,CAAA;AAC7B;"}